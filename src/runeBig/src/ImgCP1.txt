/*
                FOR TEST 

*/

#include "RMVideoCapture.hpp"
#include "ImgCP.hpp"
#include <opencv2/core/core.hpp>  
#include <opencv2/highgui/highgui.hpp>  
#include <opencv2/imgproc/imgproc.hpp>  
#include <iostream>  
#include <cmath>
#include "findRect.hpp"
#include "MnistRecognizer.h"
#include "DigitRecognizer.h"
#include "Settings.h"
#include "angleSol.h"
#include "ros/ros.h"
#include "geometry_msgs/Point.h"
using namespace std;
using namespace cv;
volatile unsigned int pIdx = 0;
volatile unsigned int cIdx = 0;
struct ImageData {
	Mat img;
	unsigned int frame;
};
void Pointi2Pointf(vector<Point>& tempi,vector<Point2f>& tempf)
{
    tempf.clear();
    for(int i = 0; i< tempi.size();i++)
    {
        Point tpi = tempi[i];
        Point2f tpf;
        tpf.x = (float)tpi.x;
        tpf.y = (float)tpi.y;
        tempf.push_back(tpf);
    }
}
ImageData data[BUFFER_SIZE];
void ImgCP::ImageProducer()
{
	if (isVideoMode)
	{
		if (videoPath == NULL)
		{
			cout << "excuse me?" << endl;
			return;
		}
		VideoCapture cap(videoPath);
		if (!cap.isOpened())
		{
			cout << "not open" << endl;
			return;
		}
		cap.set(CV_CAP_PROP_FRAME_WIDTH,640);
		cap.set(CV_CAP_PROP_FRAME_HEIGHT,480);
		while(1)
		{
			while (pIdx - cIdx >= BUFFER_SIZE);
			Mat temp;
			cap >> temp; 
			resize(temp, temp, Size(640, 480), 0, 0, INTER_CUBIC);
			temp.copyTo(data[pIdx % BUFFER_SIZE].img);
			data[pIdx % BUFFER_SIZE].frame++;
			++pIdx;
		}
	}
	else
	{
		std::string cameraPath = "/dev/video";
    //const char* cp =  cameraPath + cameraNumber;
        RMVideoCapture cap("/dev/video1", 3); 
		cap.setVideoFormat(640, 480, 1);
		//cap.setExposureTime(0, settings->cameraSetting.ExposureTime);//settings->exposure_time);
		cap.startStream();
		cap.info();
		while(1)
		{
			while (pIdx - cIdx >= BUFFER_SIZE);
			cap >> data[pIdx % BUFFER_SIZE].img;
			data[pIdx % BUFFER_SIZE].frame = cap.getFrameCount();
			++pIdx;
		}
	}
}

void ImgCP::ImageConsumer(int argc, char** argv)
{
    cout<<"start"<<endl;
    Settings s("setting.xml","3.yml");
    if(!s.load())
    {
	    cout<<"where is my setting file?"<<endl;        
	    return ;
    }
    Settings s2("setting.xml","4.yml");
    if(!s2.load())
    {
	    cout<<"where is my setting file?"<<endl;        
	    return ;
    }
    Settings s3("setting.xml","5.yml");
    if(!s3.load())
    {
	    cout<<"where is my setting file?"<<endl;        
	    return ;
    }

    ros::init( argc, argv,"rune");
    ros::NodeHandle n;
    ros::Publisher rune_pub = n.advertise<geometry_msgs::Point>("test_locations",5);
    clock_t start, end;
    geometry_msgs::Point target;
    cout<<"ros publisher initialized"<<endl;
    DigitRecognizer dt;
    int previousDigits[5];
    int prevoiusSudokus[9];
    int hitIndex = 0;
    ofstream record;
    record.open("records.txt");
    while(true)
    {
        
        //record<<"******"<<endl;
        while (pIdx - cIdx == 0);
        start = clock();
        Mat img;
		data[cIdx % BUFFER_SIZE].img.copyTo(img);
		unsigned int frameNum = data[cIdx % BUFFER_SIZE].frame;
		++cIdx;
        imshow("input",img);
       // cvtColor(img, image, CV_BGR2GRAY);
       // threshold(image,binary,150,255,CV_THRESH_BINARY);
        //imshow("binary",binary);
        //imshow("close-open", binary); 
      vector<vector<Point> > squares;
       findSquares(img,squares);
       cout<<squares.size()<<endl;
        if(squares.size()>0)
        {
            vector<Point2f> haha;
            for(int i = 0; i< squares.size();i++)
            {
                if(squares[i].size() == 4)
                {
                    if(squares[i][0].x == 0 ||squares[i][1].x == 0 ||squares[i][2].x == 0 ||squares[i][3].x == 0 )
                    continue;
                    if(squares[i][0].x > img.size().width*0.9||squares[i][1].x > img.size().width*0.9||squares[i][2].x > img.size().width*0.9||squares[i][3].x > img.size().width*0.9)
                    continue;
                    Pointi2Pointf(squares[i],haha);
                    record<<"====================================="<<endl;
                    record<<"Points: "<<endl;
                    for(int i = 0; i< 4;i++)
                    {
                        record<<haha[i].x<<" "<<haha[i].y<<" | ";
                    }
                    record<<endl;

                    AngleSolver ag;
                    ag.setDistortionCoefficients(s);
                    ag.setCameraMAtrix(s);
                    ag.setRealWorldTargetS(s);
                    ag.setImageTargetS(haha,img);
                    ag.getRotation_Translation_Matrix();
                    double x,y,z;
                    ag.getPositionInfo(x,y,z);
                    record<< " target in world : "<<endl;
                    record<<ag.targetInWorld<<endl;
                    record<<" target in image : "<<endl;
                    record<<ag.targetInImage<<endl;
                    record<<" cameraMatrix "<<endl;
                    record<<ag.cameraMatrix<<endl;
                    record<<"distortionCoefficients"<<endl;
                    record<<ag.distortionCoefficients<<endl;
                    record<<" rotation matrix "<<endl;
                    record<<ag.rotationMatrix<<endl;
                    record<<"translationMatrix"<<endl;
                    record<<ag.translationMatrix<<endl;
                    record<<"X: "<<x<<"Y: "<<y<<"Z: "<<z<<endl;

                }
                else
                {
                    cout<<"none"<<endl;
                }
            }
            
        }
        else
        {
            target.x = -2;
            target.y = -2;
            target.z = -2;
            rune_pub.publish(target);
        }
        drawSquares(img,squares);
        imshow("with circle",img);
        waitKey(30);
        if(waitKey(20)==113)
        {
            break;
        }
    }
    record.close();

}

